from threading import TIMEOUT_MAX
from matplotlib.pyplot import text
from telebot import types
from src import *
from datetime import datetime as dt
from datetime import timedelta
import pandas as pd
import dataframe_image as dfi
import os
import json
from json import JSONDecodeError


pd.set_option('display.max_colwidth', None)


    
@bot.message_handler(commands=["start"])
def start(message):
    markup = types.ReplyKeyboardMarkup()

    new_meal = types.KeyboardButton('üçΩ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–µ–º –ø–∏—â–∏')
    show_diaries = types.KeyboardButton('üìÜ –ü–æ–∫–∞–∑–∞—Ç—å –¥–∞—Ç—ã –¥–Ω–µ–≤–Ω–∏–∫–æ–≤')
    get_diary = types.KeyboardButton('üìí –ü–æ–ª—É—á–∏—Ç—å –¥–Ω–µ–≤–Ω–∏–∫')


    markup.add(new_meal, get_diary, show_diaries)

    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, {0.first_name}!'.format(message.from_user), reply_markup=markup)




@bot.message_handler(content_types=["text"])
def bot_message(message):

    if message.text == 'üçΩ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–µ–º –ø–∏—â–∏':
        markup = types.ReplyKeyboardMarkup()
        breakfast = types.KeyboardButton('ü•û –ó–∞–≤—Ç—Ä–∞–∫')
        lunch = types.KeyboardButton('üçú –û–±–µ–¥')
        dinner = types.KeyboardButton('ü•ó –£–∂–∏–Ω')
        new_snack = types.KeyboardButton('üçè –ü–µ—Ä–µ–∫—É—Å')
        back = types.KeyboardButton('üîô –ù–∞–∑–∞–¥')
        
        markup.add(breakfast, lunch, dinner, new_snack, back)
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–µ—Ç–µ –ø—Ä–∏–µ–º –ø–∏—â–∏', reply_markup=markup)


    elif message.text == 'üîô –ù–∞–∑–∞–¥':
        # markup = types.ReplyKeyboardMarkup()

        # new_meal = types.KeyboardButton('üçΩ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–µ–º –ø–∏—â–∏')
        # show_diaries = types.KeyboardButton('üìÜ –ü–æ–∫–∞–∑–∞—Ç—å –¥–∞—Ç—ã –¥–Ω–µ–≤–Ω–∏–∫–æ–≤')
        # diary = types.KeyboardButton('üìí –ü–æ–ª—É—á–∏—Ç—å –¥–Ω–µ–≤–Ω–∏–∫')

        # markup.add(new_meal, diary, show_diaries)
        # bot.send_message(message.chat.id, '–ù–∞–∑–∞–¥', reply_markup=markup)
        msg = bot.send_message(message.chat.id, '–ù–∞–∑–∞–¥')
        bot.register_next_step_handler(msg, start)
    

    elif message.text == 'ü•û –ó–∞–≤—Ç—Ä–∞–∫':
        meal_name = '–ó–∞–≤—Ç—Ä–∞–∫'

        date_keyboard = types.ReplyKeyboardMarkup()
        key_today = types.KeyboardButton('–°–µ–≥–æ–¥–Ω—è')
        key_yesterday = types.KeyboardButton('–í—á–µ—Ä–∞')
        back = types.KeyboardButton('üîô –ù–∞–∑–∞–¥')
        date_keyboard.add(key_today, key_yesterday, back)

        msg = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–Ω—å –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É', reply_markup=date_keyboard)
        bot.register_next_step_handler(msg, get_date, meal_name)
  

    elif message.text == 'üçú –û–±–µ–¥':
        meal_name = '–û–±–µ–¥'

        date_keyboard = types.ReplyKeyboardMarkup()
        key_today = types.KeyboardButton('–°–µ–≥–æ–¥–Ω—è')
        key_yesterday = types.KeyboardButton('–í—á–µ—Ä–∞')
        back = types.KeyboardButton('üîô –ù–∞–∑–∞–¥')
        date_keyboard.add(key_today, key_yesterday, back)

        msg = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–Ω—å –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É', reply_markup=date_keyboard)
        bot.register_next_step_handler(msg, get_date, meal_name)

    elif message.text == 'ü•ó –£–∂–∏–Ω':
        meal_name = '–£–∂–∏–Ω'

        date_keyboard = types.ReplyKeyboardMarkup()
        key_today = types.KeyboardButton('–°–µ–≥–æ–¥–Ω—è')
        key_yesterday = types.KeyboardButton('–í—á–µ—Ä–∞')
        back = types.KeyboardButton('üîô –ù–∞–∑–∞–¥')
        date_keyboard.add(key_today, key_yesterday, back)

        msg = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–Ω—å –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É', reply_markup=date_keyboard)
        bot.register_next_step_handler(msg, get_date, meal_name)

    elif message.text == 'üçè –ü–µ—Ä–µ–∫—É—Å':
        meal_name = '–ü–µ—Ä–µ–∫—É—Å'

        date_keyboard = types.ReplyKeyboardMarkup()
        key_today = types.KeyboardButton('–°–µ–≥–æ–¥–Ω—è')
        key_yesterday = types.KeyboardButton('–í—á–µ—Ä–∞')
        back = types.KeyboardButton('üîô –ù–∞–∑–∞–¥')
        date_keyboard.add(key_today, key_yesterday, back)

        msg = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–Ω—å –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É', reply_markup=date_keyboard)
        bot.register_next_step_handler(msg, get_date, meal_name)


    elif message.text == 'üìí –ü–æ–ª—É—á–∏—Ç—å –¥–Ω–µ–≤–Ω–∏–∫':

        date_keyboard = types.ReplyKeyboardMarkup()
        key_today = types.KeyboardButton('–°–µ–≥–æ–¥–Ω—è')
        key_yesterday = types.KeyboardButton('–í—á–µ—Ä–∞')
        back = types.KeyboardButton('üîô –ù–∞–∑–∞–¥')
        date_keyboard.add(key_today, key_yesterday, back)

        bot_text =  '–ó–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å –Ω—É–∂–µ–Ω –¥–Ω–µ–≤–Ω–∏–∫?\n–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–Ω—å –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YY'
        msg = bot.send_message(message.chat.id, bot_text, reply_markup=date_keyboard)
        bot.register_next_step_handler(msg, get_diary)


    elif message.text == 'üìÜ –ü–æ–∫–∞–∑–∞—Ç—å –¥–∞—Ç—ã –¥–Ω–µ–≤–Ω–∏–∫–æ–≤':
        try:
            file = open(os.getcwd() + '/data/diaries.json', 'r')
            diary = json.load(file)
            file.close()
            
            diaries_dates = ', '.join(list(diary.keys()))
            msg =  bot.send_message(message.chat.id, '–î–∞—Ç—ã –¥–Ω–µ–≤–Ω–∏–∫–æ–≤: {}'.format(diaries_dates))
            bot.register_next_step_handler(msg, start)

        except JSONDecodeError:
            msg =  bot.send_message(message.chat.id, '–í –¥–Ω–µ–≤–Ω–∏–∫–µ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π')
            bot.register_next_step_handler(msg, start)


def get_date(message, meal_name):
    try:
        if message.text == '–°–µ–≥–æ–¥–Ω—è':
            date = dt.now().strftime("%d.%m.%y")
        elif message.text == '–í—á–µ—Ä–∞':
            date = (dt.now() - timedelta(days=1)).strftime("%d.%m.%y")
        else:
            dt.strptime(message.text, '%d.%m.%y') 
            date = message.text

        msg = bot.send_message(message.chat.id, '–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM')
        bot.register_next_step_handler(msg, get_time, meal_name, date) 
    except ValueError:
        bot.send_message(message.from_user.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        bot.register_next_step_handler(message, get_date, meal_name)

    

def get_time(message, meal_name, date): 
    if meal_name != '–ü–µ—Ä–µ–∫—É—Å':
        try:
            dt.strptime(message.text, "%H:%M") 
            
            meal = make_meal(meal_name)
            meal[meal_name]['–í—Ä–µ–º—è'] = message.text
            msg = bot.send_message(message.chat.id, '–£–∫–∞–∂–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –≥–æ–ª–æ–¥–∞')
            bot.register_next_step_handler(msg, get_hunger, meal_name, meal, date)

        except ValueError:
            msg = bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö')
            bot.register_next_step_handler(msg, get_time, meal_name, date) 
    else:
        try:
            dt.strptime(message.text, "%H:%M") 
            
            meal = make_meal(meal_name)
            meal[meal_name]['–í—Ä–µ–º—è'] = message.text
            msg = bot.send_message(message.chat.id, '–£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã')
            bot.register_next_step_handler(msg, get_composition_snak, meal_name, meal, date)

        except ValueError:
            msg = bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö')
            bot.register_next_step_handler(msg, get_time, meal_name, date) 


def get_hunger(message, meal_name, meal, date):
    meal[meal_name]['–£—Ä–æ–≤–µ–Ω—å –≥–æ–ª–æ–¥–∞'] = message.text
    msg = bot.send_message(message.chat.id, '–£–∫–∞–∂–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –Ω–∞—Å—ã—â–µ–Ω–∏—è')
    bot.register_next_step_handler(msg, get_saturation, meal_name, meal, date) 


def get_saturation(message, meal_name, meal, date):
    meal[meal_name]['–£—Ä–æ–≤–µ–Ω—å –Ω–∞—Å—ã—â–µ–Ω–∏—è'] = message.text
    msg = bot.send_message(message.chat.id, '–£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã')
    bot.register_next_step_handler(msg, get_composition, meal_name, meal, date) 


def get_composition(message, meal_name, meal, date):
    meal[meal_name]['–°–æ—Å—Ç–∞–≤'] = message.text

    try:
        write_file = open(os.getcwd() + '/data/diaries.json', 'r')
        diary = json.load(write_file)
        write_file.close()

        add_record(diary, date, meal)

        write_file = open(os.getcwd() + '/data/diaries.json', 'w')
        json.dump(diary, write_file, indent=4)
        write_file.close()
    except JSONDecodeError:
        diary = {}
        add_record(diary, date, meal)

        write_file = open(os.getcwd() + '/data/diaries.json', 'w')
        json.dump(diary, write_file, indent=4)
        write_file.close()

    msg = bot.send_message(message.chat.id, '–ü—Ä–∏–µ–º –ø–∏—â–∏ –¥–æ–±–∞–≤–ª–µ–Ω')
    start(msg)


def get_composition_snak(message, meal_name, meal, date):
    meal[meal_name]['–°–æ—Å—Ç–∞–≤'] = message.text

    try:
        write_file = open(os.getcwd() + '/data/diaries.json', 'r')
        diary = json.load(write_file)
        write_file.close()

        add_record_snak(diary, date, meal, meal_name)

        write_file = open(os.getcwd() + '/data/diaries.json', 'w')
        json.dump(diary, write_file, indent=4)
        write_file.close()
    except JSONDecodeError:
        diary = {}
        add_record_snak(diary, date, meal, meal_name)
        write_file = open(os.getcwd() + '/data/diaries.json', 'w')
        json.dump(diary, write_file, indent=4)
        write_file.close()

    msg = bot.send_message(message.chat.id, '–ü–µ—Ä–µ–∫—É—Å –¥–æ–±–∞–≤–ª–µ–Ω –¥–æ–±–∞–≤–ª–µ–Ω')
    start(msg)


def get_diary(message):
    if message.text == 'üîô –ù–∞–∑–∞–¥':
        start(message)
    else:
        try:
            if message.text == '–°–µ–≥–æ–¥–Ω—è':
                diary_date = dt.now().strftime("%d.%m.%y")
            elif message.text == '–í—á–µ—Ä–∞':
                diary_date = (dt.now() - timedelta(days=1)).strftime("%d.%m.%y")
            else:
                dt.strptime(message.text, '%d.%m.%y') 
                diary_date = message.text

            #read 
            file = open(os.getcwd() + '/data/diaries.json', 'r')
            diary = json.load(file)
            file.close()

            if diary_date  not in list(diary.keys()):
                msg = bot.send_message(message.chat.id, '–î–Ω–µ–≤–Ω–∏–∫–∞ —Å —Ç–∞–∫–æ–π –¥–∞—Ç–æ–π –Ω–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É')
                bot.register_next_step_handler(msg, get_diary)
            else:
                diary_for_day = diary.get(diary_date)

                df = pd.DataFrame(diary_for_day).T
                png_path = os.getcwd() + '/data/img/mytable.png'

                dfi.export(df, png_path)

                table_png = open(png_path, 'rb')
                bot.send_photo(message.chat.id, table_png)
                msg = bot.send_message(message.chat.id, '–î–Ω–µ–≤–Ω–∏–∫ –∑–∞ {}'.format(diary_date))
                bot.register_next_step_handler(msg, start)
        
        except ValueError:
            bot.send_message(message.from_user.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
            bot.register_next_step_handler(message, get_diary)




# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
bot.polling(none_stop=True, interval=0)







